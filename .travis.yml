language: node_js

node_js:
    - "10"

python:
    - "3.6"

dist: xenial

services:
    - docker

sudo: required

cache:
    directories:
        - node_modules

env:
    - DEPLOY_PACKAGE=true

matrix:
    fast_finish: true

before_install:
    - npm install -g npm
    - npm install -g ganache-cli@~6.1.8 release-it greenkeeper-lockfile codacy-coverage surya@0.2.7
    # - sudo apt-get -y install python3.6 python3.6-dev gnupg-agent python3-apt
    - sudo apt-get -y install gnupg-agent python3-apt
    - pyenv global system 3.6.7
    # - pip3 install --user graphviz mythril==0.19.10
    - pip3 install -r requirements_dev.txt
    - docker pull chainsecurity/securify
    - |
        if [ "${DEPLOY_PACKAGE}" = "true" ] && [ ! -z "${TRAVIS_TAG}" ]; then
          gpg-agent --daemon --no-grab --write-env-file $HOME/.gpg-agent-info
          pip3 install --user twine six==1.10.0 wheel==0.31.0
          sudo apt-get install oracle-java8-set-default maven
          java -version
          mvn -version
          export WEB3J_VERSION=4.0.1
          curl -L -o web3j-${WEB3J_VERSION}.tar https://github.com/web3j/web3j/releases/download/v${WEB3J_VERSION}/web3j-${WEB3J_VERSION}.tar
          tar xf web3j-${WEB3J_VERSION}.tar
          export PATH="${PWD}/web3j-${WEB3J_VERSION}/bin:${PATH}"
          web3j version
          bash -x scripts/maven.sh
          echo $GPG_SECRET_KEYS | base64 --decode | $GPG_EXECUTABLE --import
          echo $GPG_OWNERTRUST | base64 --decode | $GPG_EXECUTABLE --import-ownertrust
          version_line=$(cat .bumpversion.cfg | grep current_version)
          release_version=${version_line##* }
          export release_version
          echo "Release version: $release_version"
        fi
before_script:
    - greenkeeper-lockfile-update
    - ganache-cli > ganache-cli.log &

script:
    - npm run lint
    - npm run test:cover
    - npm run report-coverage
    - npm run migrate
    - git status
    - git add package-lock.json
    - git diff-index --quiet HEAD || git commit -m "Travis update"
    - python2 -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
    - sudo apt-get install -y dot2tex
    - npm run security:surya
    # The lines below should run only in case of merge to develop branch
    - travis_wait 30 npm run security:mythril
    - travis_wait 30 npm run security:securify
    #-|
    #    if [ "${TRAVIS_BRANCH}" = "develop" ]; then
    #      docker run -v $(pwd):/project chainsecurity/securify 2>&1 | tee securifyReport.txt || true
    #   fi


after_script:
    - greenkeeper-lockfile-upload

after_success:
  - |
        BRANCHNAME=${TRAVIS_BRANCH//\//_}
        declare -r SSH_FILE="$(mktemp -u $HOME/.ssh/XXXXX)"
        openssl aes-256-cbc -K $encrypted_387ed244ad7b_key -iv $encrypted_387ed244ad7b_iv -in .travis/travis_keeper-contracts-security-reports.enc -out $SSH_FILE -d
        chmod 600 "$SSH_FILE" \
        && printf "%s\n" \
              "Host github.com" \
              "  IdentityFile $SSH_FILE" \
              "  LogLevel ERROR" >> ~/.ssh/config

        git clone git@github.com:oceanprotocol/keeper-contracts-security-reports.git
        cp -rp securifyReport.txt keeper-contracts-security-reports/${BRANCHNAME}_securifyReport.txt
        cp -rp KeeperContracts.png keeper-contracts-security-reports/${BRANCHNAME}_KeeperContracts.png
        cd keeper-contracts-security-reports
        git add .
        git commit -m "UPSERT ${BRANCHNAME}"
        git push
        cd ..

notifications:
    email: false

deploy:
    - provider: npm
      email: "devops@oceanprotocol.com"
      api_key: ${NPM_TOKEN}
      skip_cleanup: true
      on:
          tags: true
          all_branches: true
          condition: $DEPLOY_PACKAGE = true

    - provider: script
      script: bash -x ./scripts/maven.sh && mvn clean deploy --settings .maven.xml -B -U -Prelease
      skip_cleanup: true
      on:
          tags: true
          all_branches: true
          condition: $DEPLOY_PACKAGE = true

    - provider: script
      script: bash -x ./scripts/deploy_pypi.sh
      skip_cleanup: true
      on:
          tags: true
          all_branches: true
          condition: $DEPLOY_PACKAGE = true


    - provider: releases
      skip_cleanup: true
      api_key: $GITHUB_TOKEN
      name: "$release_version"
      on:
          tags: true
          all_branches: true
          condition: $DEPLOY_PACKAGE = true
